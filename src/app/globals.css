@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 255, 255, 255;
  --background-rgb: 0, 0, 0;
}

.dark {
  --foreground-rgb: 255, 255, 255;
  --background-rgb: 0, 0, 0;
}

.light {
  --foreground-rgb: 0, 0, 0;
  --background-rgb: 255, 255, 255;
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
  cursor: none;
}

@media (pointer: coarse) {
  body {
    cursor: auto;
  }
  .cursor,
  .cursor-dot {
    display: none;
  }
}

.cursor {
  width: 20px;
  height: 20px;
  border: 2px solid rgb(var(--foreground-rgb));
  border-radius: 50%;
  position: fixed;
  pointer-events: none;
  z-index: 999;
  transition: all 0.1s ease;
  transition-property: width, height, border;
}

.cursor-dot {
  width: 4px;
  height: 4px;
  background-color: rgb(var(--foreground-rgb));
  border-radius: 50%;
  position: fixed;
  pointer-events: none;
  z-index: 999;
}

.noise {
  position: fixed;
  inset: 0;
  z-index: -5;
  opacity: 0.05;
  pointer-events: none;
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
}

@layer base {
  :root {
    --dot-size: 1px;
    --dot-space: 22px;
  }

  body {
    @apply bg-dark text-light;
  }

  section {
    @apply py-32;
  }

  .section-content {
    @apply max-w-4xl mx-auto px-4;
  }
}

@layer components {
  .project-card {
    @apply border border-accent p-6 transition-all duration-300;
  }

  .project-card:hover {
    @apply border-light transform -translate-y-1;
    box-shadow: 0 4px 20px rgba(255, 255, 255, 0.1);
  }

  .gradient-text {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-light via-accent to-light;
    background-size: 200% auto;
    animation: shine 8s linear infinite;
  }
}

@keyframes shine {
  from {
    background-position: -200% center;
  }
  to {
    background-position: 200% center;
  }
}

/* Dot matrix background */
.dot-matrix {
  background-image: radial-gradient(
    circle at center,
    #333 var(--dot-size),
    transparent var(--dot-size)
  );
  background-size: var(--dot-space) var(--dot-space);
  background-position: center;
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Text glitch effect */
.glitch {
  position: relative;
  color: #fff;
}

.glitch::before,
.glitch::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  clip: rect(0, 900px, 0, 0);
  opacity: 0.5;
}

.glitch::before {
  left: 2px;
  text-shadow: -1px 0 #ff0000;
  animation: glitch-anim-1 2s infinite linear alternate-reverse;
}

.glitch::after {
  left: -2px;
  text-shadow: 2px 0 #00ff00;
  animation: glitch-anim-2 3s infinite linear alternate-reverse;
}

@keyframes glitch-anim-1 {
  0% {
    clip: rect(20px, 900px, 21px, 0);
  }
  100% {
    clip: rect(42px, 900px, 44px, 0);
  }
}

@keyframes glitch-anim-2 {
  0% {
    clip: rect(12px, 900px, 59px, 0);
  }
  100% {
    clip: rect(70px, 900px, 89px, 0);
  }
}

/* Hover effect for links */
.hover-underline {
  position: relative;
  text-decoration: none;
  @apply text-light;
}

.hover-underline::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 1px;
  bottom: -2px;
  left: 0;
  background-color: currentColor;
  transform: scaleX(0);
  transform-origin: right;
  transition: transform 0.3s ease;
}

.hover-underline:hover::after {
  transform: scaleX(1);
  transform-origin: left;
}

/* Loading dots animation */
.loading-dots::after {
  content: '.';
  animation: dots 1.5s steps(5, end) infinite;
}

@keyframes dots {
  0%, 20% { content: '.'; }
  40% { content: '..'; }
  60% { content: '...'; }
  80%, 100% { content: ''; }
} 